// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastResponse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestForFastResponse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestForSlowResponse_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlowResponse_message_2eproto;
namespace ProtMes {
class WrapperMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrapperMessage> _instance;
} _WrapperMessage_default_instance_;
class FastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FastResponse> _instance;
} _FastResponse_default_instance_;
class SlowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SlowResponse> _instance;
} _SlowResponse_default_instance_;
class RequestForFastResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestForFastResponse> _instance;
} _RequestForFastResponse_default_instance_;
class RequestForSlowResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestForSlowResponse> _instance;
} _RequestForSlowResponse_default_instance_;
}  // namespace ProtMes
static void InitDefaultsscc_info_FastResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtMes::_FastResponse_default_instance_;
    new (ptr) ::ProtMes::FastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtMes::FastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FastResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FastResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_RequestForFastResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtMes::_RequestForFastResponse_default_instance_;
    new (ptr) ::ProtMes::RequestForFastResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtMes::RequestForFastResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestForFastResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestForFastResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_RequestForSlowResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtMes::_RequestForSlowResponse_default_instance_;
    new (ptr) ::ProtMes::RequestForSlowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtMes::RequestForSlowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestForSlowResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestForSlowResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_SlowResponse_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtMes::_SlowResponse_default_instance_;
    new (ptr) ::ProtMes::SlowResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtMes::SlowResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SlowResponse_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SlowResponse_message_2eproto}, {}};

static void InitDefaultsscc_info_WrapperMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ProtMes::_WrapperMessage_default_instance_;
    new (ptr) ::ProtMes::WrapperMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ProtMes::WrapperMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_WrapperMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_WrapperMessage_message_2eproto}, {
      &scc_info_FastResponse_message_2eproto.base,
      &scc_info_SlowResponse_message_2eproto.base,
      &scc_info_RequestForFastResponse_message_2eproto.base,
      &scc_info_RequestForSlowResponse_message_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::ProtMes::WrapperMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::WrapperMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtMes::WrapperMessage, fast_response_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::WrapperMessage, slow_response_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::WrapperMessage, request_for_fast_response_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::WrapperMessage, request_for_slow_response_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::ProtMes::FastResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::FastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtMes::FastResponse, current_date_time_),
  0,
  PROTOBUF_FIELD_OFFSET(::ProtMes::SlowResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::SlowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtMes::SlowResponse, connected_client_count_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProtMes::RequestForFastResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtMes::RequestForSlowResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ProtMes::RequestForSlowResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ProtMes::RequestForSlowResponse, time_in_seconds_to_sleep_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::ProtMes::WrapperMessage)},
  { 13, 19, sizeof(::ProtMes::FastResponse)},
  { 20, 26, sizeof(::ProtMes::SlowResponse)},
  { 27, -1, sizeof(::ProtMes::RequestForFastResponse)},
  { 32, 38, sizeof(::ProtMes::RequestForSlowResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtMes::_WrapperMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtMes::_FastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtMes::_SlowResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtMes::_RequestForFastResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ProtMes::_RequestForSlowResponse_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\007ProtMes\"\364\001\n\016WrapperMess"
  "age\022,\n\rfast_response\030\001 \001(\0132\025.ProtMes.Fas"
  "tResponse\022,\n\rslow_response\030\002 \001(\0132\025.ProtM"
  "es.SlowResponse\022B\n\031request_for_fast_resp"
  "onse\030\003 \001(\0132\037.ProtMes.RequestForFastRespo"
  "nse\022B\n\031request_for_slow_response\030\004 \001(\0132\037"
  ".ProtMes.RequestForSlowResponse\")\n\014FastR"
  "esponse\022\031\n\021current_date_time\030\001 \002(\t\".\n\014Sl"
  "owResponse\022\036\n\026connected_client_count\030\001 \002"
  "(\r\"\030\n\026RequestForFastResponse\":\n\026RequestF"
  "orSlowResponse\022 \n\030time_in_seconds_to_sle"
  "ep\030\001 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[5] = {
  &scc_info_FastResponse_message_2eproto.base,
  &scc_info_RequestForFastResponse_message_2eproto.base,
  &scc_info_RequestForSlowResponse_message_2eproto.base,
  &scc_info_SlowResponse_message_2eproto.base,
  &scc_info_WrapperMessage_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, descriptor_table_protodef_message_2eproto, "message.proto", 448,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 5, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);
namespace ProtMes {

// ===================================================================

void WrapperMessage::InitAsDefaultInstance() {
  ::ProtMes::_WrapperMessage_default_instance_._instance.get_mutable()->fast_response_ = const_cast< ::ProtMes::FastResponse*>(
      ::ProtMes::FastResponse::internal_default_instance());
  ::ProtMes::_WrapperMessage_default_instance_._instance.get_mutable()->slow_response_ = const_cast< ::ProtMes::SlowResponse*>(
      ::ProtMes::SlowResponse::internal_default_instance());
  ::ProtMes::_WrapperMessage_default_instance_._instance.get_mutable()->request_for_fast_response_ = const_cast< ::ProtMes::RequestForFastResponse*>(
      ::ProtMes::RequestForFastResponse::internal_default_instance());
  ::ProtMes::_WrapperMessage_default_instance_._instance.get_mutable()->request_for_slow_response_ = const_cast< ::ProtMes::RequestForSlowResponse*>(
      ::ProtMes::RequestForSlowResponse::internal_default_instance());
}
class WrapperMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<WrapperMessage>()._has_bits_);
  static const ::ProtMes::FastResponse& fast_response(const WrapperMessage* msg);
  static void set_has_fast_response(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::ProtMes::SlowResponse& slow_response(const WrapperMessage* msg);
  static void set_has_slow_response(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::ProtMes::RequestForFastResponse& request_for_fast_response(const WrapperMessage* msg);
  static void set_has_request_for_fast_response(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::ProtMes::RequestForSlowResponse& request_for_slow_response(const WrapperMessage* msg);
  static void set_has_request_for_slow_response(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::ProtMes::FastResponse&
WrapperMessage::_Internal::fast_response(const WrapperMessage* msg) {
  return *msg->fast_response_;
}
const ::ProtMes::SlowResponse&
WrapperMessage::_Internal::slow_response(const WrapperMessage* msg) {
  return *msg->slow_response_;
}
const ::ProtMes::RequestForFastResponse&
WrapperMessage::_Internal::request_for_fast_response(const WrapperMessage* msg) {
  return *msg->request_for_fast_response_;
}
const ::ProtMes::RequestForSlowResponse&
WrapperMessage::_Internal::request_for_slow_response(const WrapperMessage* msg) {
  return *msg->request_for_slow_response_;
}
WrapperMessage::WrapperMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtMes.WrapperMessage)
}
WrapperMessage::WrapperMessage(const WrapperMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_fast_response()) {
    fast_response_ = new ::ProtMes::FastResponse(*from.fast_response_);
  } else {
    fast_response_ = nullptr;
  }
  if (from._internal_has_slow_response()) {
    slow_response_ = new ::ProtMes::SlowResponse(*from.slow_response_);
  } else {
    slow_response_ = nullptr;
  }
  if (from._internal_has_request_for_fast_response()) {
    request_for_fast_response_ = new ::ProtMes::RequestForFastResponse(*from.request_for_fast_response_);
  } else {
    request_for_fast_response_ = nullptr;
  }
  if (from._internal_has_request_for_slow_response()) {
    request_for_slow_response_ = new ::ProtMes::RequestForSlowResponse(*from.request_for_slow_response_);
  } else {
    request_for_slow_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ProtMes.WrapperMessage)
}

void WrapperMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrapperMessage_message_2eproto.base);
  ::memset(&fast_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_for_slow_response_) -
      reinterpret_cast<char*>(&fast_response_)) + sizeof(request_for_slow_response_));
}

WrapperMessage::~WrapperMessage() {
  // @@protoc_insertion_point(destructor:ProtMes.WrapperMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WrapperMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete fast_response_;
  if (this != internal_default_instance()) delete slow_response_;
  if (this != internal_default_instance()) delete request_for_fast_response_;
  if (this != internal_default_instance()) delete request_for_slow_response_;
}

void WrapperMessage::ArenaDtor(void* object) {
  WrapperMessage* _this = reinterpret_cast< WrapperMessage* >(object);
  (void)_this;
}
void WrapperMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WrapperMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrapperMessage& WrapperMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrapperMessage_message_2eproto.base);
  return *internal_default_instance();
}


void WrapperMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtMes.WrapperMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fast_response_ != nullptr);
      fast_response_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slow_response_ != nullptr);
      slow_response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(request_for_fast_response_ != nullptr);
      request_for_fast_response_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(request_for_slow_response_ != nullptr);
      request_for_slow_response_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WrapperMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .ProtMes.FastResponse fast_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fast_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtMes.SlowResponse slow_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slow_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtMes.RequestForFastResponse request_for_fast_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_for_fast_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ProtMes.RequestForSlowResponse request_for_slow_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_for_slow_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrapperMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtMes.WrapperMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .ProtMes.FastResponse fast_response = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fast_response(this), target, stream);
  }

  // optional .ProtMes.SlowResponse slow_response = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::slow_response(this), target, stream);
  }

  // optional .ProtMes.RequestForFastResponse request_for_fast_response = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::request_for_fast_response(this), target, stream);
  }

  // optional .ProtMes.RequestForSlowResponse request_for_slow_response = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::request_for_slow_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtMes.WrapperMessage)
  return target;
}

size_t WrapperMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtMes.WrapperMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .ProtMes.FastResponse fast_response = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *fast_response_);
    }

    // optional .ProtMes.SlowResponse slow_response = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slow_response_);
    }

    // optional .ProtMes.RequestForFastResponse request_for_fast_response = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_for_fast_response_);
    }

    // optional .ProtMes.RequestForSlowResponse request_for_slow_response = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_for_slow_response_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrapperMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtMes.WrapperMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WrapperMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrapperMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtMes.WrapperMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtMes.WrapperMessage)
    MergeFrom(*source);
  }
}

void WrapperMessage::MergeFrom(const WrapperMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtMes.WrapperMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_fast_response()->::ProtMes::FastResponse::MergeFrom(from._internal_fast_response());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slow_response()->::ProtMes::SlowResponse::MergeFrom(from._internal_slow_response());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_request_for_fast_response()->::ProtMes::RequestForFastResponse::MergeFrom(from._internal_request_for_fast_response());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_request_for_slow_response()->::ProtMes::RequestForSlowResponse::MergeFrom(from._internal_request_for_slow_response());
    }
  }
}

void WrapperMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtMes.WrapperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrapperMessage::CopyFrom(const WrapperMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtMes.WrapperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrapperMessage::IsInitialized() const {
  if (_internal_has_fast_response()) {
    if (!fast_response_->IsInitialized()) return false;
  }
  if (_internal_has_slow_response()) {
    if (!slow_response_->IsInitialized()) return false;
  }
  if (_internal_has_request_for_slow_response()) {
    if (!request_for_slow_response_->IsInitialized()) return false;
  }
  return true;
}

void WrapperMessage::InternalSwap(WrapperMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WrapperMessage, request_for_slow_response_)
      + sizeof(WrapperMessage::request_for_slow_response_)
      - PROTOBUF_FIELD_OFFSET(WrapperMessage, fast_response_)>(
          reinterpret_cast<char*>(&fast_response_),
          reinterpret_cast<char*>(&other->fast_response_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WrapperMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FastResponse::InitAsDefaultInstance() {
}
class FastResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<FastResponse>()._has_bits_);
  static void set_has_current_date_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FastResponse::FastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtMes.FastResponse)
}
FastResponse::FastResponse(const FastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_current_date_time()) {
    current_date_time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_current_date_time(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ProtMes.FastResponse)
}

void FastResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FastResponse_message_2eproto.base);
  current_date_time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FastResponse::~FastResponse() {
  // @@protoc_insertion_point(destructor:ProtMes.FastResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  current_date_time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FastResponse::ArenaDtor(void* object) {
  FastResponse* _this = reinterpret_cast< FastResponse* >(object);
  (void)_this;
}
void FastResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FastResponse& FastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FastResponse_message_2eproto.base);
  return *internal_default_instance();
}


void FastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtMes.FastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    current_date_time_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string current_date_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_current_date_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ProtMes.FastResponse.current_date_time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FastResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtMes.FastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string current_date_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_current_date_time().data(), static_cast<int>(this->_internal_current_date_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "ProtMes.FastResponse.current_date_time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_current_date_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtMes.FastResponse)
  return target;
}

size_t FastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtMes.FastResponse)
  size_t total_size = 0;

  // required string current_date_time = 1;
  if (_internal_has_current_date_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_current_date_time());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtMes.FastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtMes.FastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtMes.FastResponse)
    MergeFrom(*source);
  }
}

void FastResponse::MergeFrom(const FastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtMes.FastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_current_date_time()) {
    _internal_set_current_date_time(from._internal_current_date_time());
  }
}

void FastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtMes.FastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FastResponse::CopyFrom(const FastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtMes.FastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FastResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FastResponse::InternalSwap(FastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  current_date_time_.Swap(&other->current_date_time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SlowResponse::InitAsDefaultInstance() {
}
class SlowResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SlowResponse>()._has_bits_);
  static void set_has_connected_client_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SlowResponse::SlowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtMes.SlowResponse)
}
SlowResponse::SlowResponse(const SlowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  connected_client_count_ = from.connected_client_count_;
  // @@protoc_insertion_point(copy_constructor:ProtMes.SlowResponse)
}

void SlowResponse::SharedCtor() {
  connected_client_count_ = 0u;
}

SlowResponse::~SlowResponse() {
  // @@protoc_insertion_point(destructor:ProtMes.SlowResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SlowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SlowResponse::ArenaDtor(void* object) {
  SlowResponse* _this = reinterpret_cast< SlowResponse* >(object);
  (void)_this;
}
void SlowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SlowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SlowResponse& SlowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SlowResponse_message_2eproto.base);
  return *internal_default_instance();
}


void SlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtMes.SlowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connected_client_count_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SlowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 connected_client_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_connected_client_count(&has_bits);
          connected_client_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SlowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtMes.SlowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 connected_client_count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_connected_client_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtMes.SlowResponse)
  return target;
}

size_t SlowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtMes.SlowResponse)
  size_t total_size = 0;

  // required uint32 connected_client_count = 1;
  if (_internal_has_connected_client_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_connected_client_count());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SlowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtMes.SlowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SlowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SlowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtMes.SlowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtMes.SlowResponse)
    MergeFrom(*source);
  }
}

void SlowResponse::MergeFrom(const SlowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtMes.SlowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_connected_client_count()) {
    _internal_set_connected_client_count(from._internal_connected_client_count());
  }
}

void SlowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtMes.SlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlowResponse::CopyFrom(const SlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtMes.SlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlowResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void SlowResponse::InternalSwap(SlowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(connected_client_count_, other->connected_client_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SlowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestForFastResponse::InitAsDefaultInstance() {
}
class RequestForFastResponse::_Internal {
 public:
};

RequestForFastResponse::RequestForFastResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtMes.RequestForFastResponse)
}
RequestForFastResponse::RequestForFastResponse(const RequestForFastResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ProtMes.RequestForFastResponse)
}

void RequestForFastResponse::SharedCtor() {
}

RequestForFastResponse::~RequestForFastResponse() {
  // @@protoc_insertion_point(destructor:ProtMes.RequestForFastResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestForFastResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestForFastResponse::ArenaDtor(void* object) {
  RequestForFastResponse* _this = reinterpret_cast< RequestForFastResponse* >(object);
  (void)_this;
}
void RequestForFastResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestForFastResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestForFastResponse& RequestForFastResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestForFastResponse_message_2eproto.base);
  return *internal_default_instance();
}


void RequestForFastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtMes.RequestForFastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestForFastResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestForFastResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtMes.RequestForFastResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtMes.RequestForFastResponse)
  return target;
}

size_t RequestForFastResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtMes.RequestForFastResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestForFastResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtMes.RequestForFastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestForFastResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestForFastResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtMes.RequestForFastResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtMes.RequestForFastResponse)
    MergeFrom(*source);
  }
}

void RequestForFastResponse::MergeFrom(const RequestForFastResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtMes.RequestForFastResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RequestForFastResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtMes.RequestForFastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestForFastResponse::CopyFrom(const RequestForFastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtMes.RequestForFastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestForFastResponse::IsInitialized() const {
  return true;
}

void RequestForFastResponse::InternalSwap(RequestForFastResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestForFastResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RequestForSlowResponse::InitAsDefaultInstance() {
}
class RequestForSlowResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestForSlowResponse>()._has_bits_);
  static void set_has_time_in_seconds_to_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RequestForSlowResponse::RequestForSlowResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ProtMes.RequestForSlowResponse)
}
RequestForSlowResponse::RequestForSlowResponse(const RequestForSlowResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_in_seconds_to_sleep_ = from.time_in_seconds_to_sleep_;
  // @@protoc_insertion_point(copy_constructor:ProtMes.RequestForSlowResponse)
}

void RequestForSlowResponse::SharedCtor() {
  time_in_seconds_to_sleep_ = 0u;
}

RequestForSlowResponse::~RequestForSlowResponse() {
  // @@protoc_insertion_point(destructor:ProtMes.RequestForSlowResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestForSlowResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RequestForSlowResponse::ArenaDtor(void* object) {
  RequestForSlowResponse* _this = reinterpret_cast< RequestForSlowResponse* >(object);
  (void)_this;
}
void RequestForSlowResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestForSlowResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestForSlowResponse& RequestForSlowResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestForSlowResponse_message_2eproto.base);
  return *internal_default_instance();
}


void RequestForSlowResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtMes.RequestForSlowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_in_seconds_to_sleep_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestForSlowResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 time_in_seconds_to_sleep = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_time_in_seconds_to_sleep(&has_bits);
          time_in_seconds_to_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestForSlowResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtMes.RequestForSlowResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 time_in_seconds_to_sleep = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_in_seconds_to_sleep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtMes.RequestForSlowResponse)
  return target;
}

size_t RequestForSlowResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProtMes.RequestForSlowResponse)
  size_t total_size = 0;

  // required uint32 time_in_seconds_to_sleep = 1;
  if (_internal_has_time_in_seconds_to_sleep()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_in_seconds_to_sleep());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestForSlowResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtMes.RequestForSlowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestForSlowResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestForSlowResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtMes.RequestForSlowResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtMes.RequestForSlowResponse)
    MergeFrom(*source);
  }
}

void RequestForSlowResponse::MergeFrom(const RequestForSlowResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtMes.RequestForSlowResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time_in_seconds_to_sleep()) {
    _internal_set_time_in_seconds_to_sleep(from._internal_time_in_seconds_to_sleep());
  }
}

void RequestForSlowResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtMes.RequestForSlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestForSlowResponse::CopyFrom(const RequestForSlowResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtMes.RequestForSlowResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestForSlowResponse::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RequestForSlowResponse::InternalSwap(RequestForSlowResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(time_in_seconds_to_sleep_, other->time_in_seconds_to_sleep_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestForSlowResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace ProtMes
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProtMes::WrapperMessage* Arena::CreateMaybeMessage< ::ProtMes::WrapperMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtMes::WrapperMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtMes::FastResponse* Arena::CreateMaybeMessage< ::ProtMes::FastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtMes::FastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtMes::SlowResponse* Arena::CreateMaybeMessage< ::ProtMes::SlowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtMes::SlowResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtMes::RequestForFastResponse* Arena::CreateMaybeMessage< ::ProtMes::RequestForFastResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtMes::RequestForFastResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ProtMes::RequestForSlowResponse* Arena::CreateMaybeMessage< ::ProtMes::RequestForSlowResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProtMes::RequestForSlowResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
